* 폴더(디렉터리) 구분자
Windows: \ C:\gitStudy\Test1 ---> 프로그램 코드 "C:\\gitStudy\\Test1" "C:/gitStudy/Test1"
Unix/Linux/Mac: / C:/gitStudy/Test1 ---> 프로그램 코드 "C:/gitStudy/Test1"

* 깃 버전 관리
작업 디렉터리: 버전 관리의 대상(.git)이 위치하는 공간
스테이지(=인덱스): 다음 버전이 될 후보가 올라가는 공간
저장소: 버전이 만들어지고 관리되는 공간

작업 디렉터리 -> 프로그램 소스코드 폴더
스테이지, 저장소 -> 깃이 관리하는 가상 공간

하나의 버전이 만들어지는 과정
1. 작업 디렉터리 내에서 변경 사항 생성 -> 일반적인 코딩 작업
2. 작업 디렉터리에서 새로운 버전에 반영하고 싶은 변경사항을 스테이지에 등록 ("add")
3. 스테이지의 내용을 버전으로 저장소에 저장 ("commit")

GIT으로 관리하는 코드는 마지막에 줄바꿈이 있는게 좋음

* 커밋 메세지 형식
제목: 한 줄
본문: 여러 줄

* 버전 되돌리기
revert: 이전 버전으로 새로운 버전 만들기 (현재 버전 - 새롭게 추가된 이전 버전)
reset: 버전을 완전히 되돌리기 (옵션: soft, mixed, hard)
 - soft: 저장소에 있던 버전을 다시 스테이지로 되돌림
 - mixed: 작업 디렉터리의 변경 사항은 유지, 스테이지 추가, 저장소 커밋 취소
 - hard: 작업 디렉터리의 변경 사항까지 이전으로 되돌림

스태시(Stash): 작업 임시 보관

* 깃허브-소스 트리 연동
방식1 HTTPS: 계정과 암호만 있으면 연결 가능
방식2 SSH: 접속할 각 PC에서 인증키를 생성해서 깃허브에 등록
             ( 보안에 더 강하지만 일부 네트워크 환경에 따라 막아놓아 접속이 안되는 경우 O )

* 깃허브 협업
clone: 원격 저장소를 로컬로 복제 (코드, 히스토리, .git 폴더 모두 복제됨)
push: 로컬에 저장된 작업물을 원격 저장소에 저장
fetch: 다운로드만 (원격 -> 로컬)
pull: 다운로드 후 합치기 

* origin(default) = github의 원격 저장소에 붙은 별칭
* main = master = 기본 브랜치
* main: 로컬의 main, origin/main: 깃허브의 main

* 새로운 프로젝트 생성
깃, 소스트리 설치
-> 소스트리에서 깃허브 계정 연동(HTTPS)
-> 깃허브에 새 리포지토리 생성
-> 로컬(소스트리)에서 해당 리포지토리의 클론 생성
-> 코딩
-> add, commit, push

* 깃/깃허브 없이 프로젝트 진행 중에 이 프로젝트를 깃 허브에 백업하기
(PC) 깃 프로젝트 생성 및 프로젝트 진행
-> (깃허브) 리포지토리 생성 후 https 경로를 복사 (https://github.com/사용자_이름/리포지토리_이름.git)
-> (PC) 기존의 깃 프로젝트를 깃허브 경로로 추가
  로컬 저장소의 기존 프로젝트에서 [설정 -> 원격 -> 추가(origin, 깃허브 리포지토리 경로)]
-> PC에서 깃허브로 commit 이력을 push